import org.junit.runner.RunWith
import org.scalatest.FunSuite
import org.scalatest.junit.JUnitRunner

/**
 *
 * Created by Jeff on 04/04/2015.
 */
@RunWith(classOf[JUnitRunner])
class MinimumSpanningTreeTest extends FunSuite {
  val basePath = "src/main/resources/mst"

  val file_tc1 = new HeaderFile(s"$basePath/mst-tc1.txt")
  val graph_tc1 = Graph.fromFile(file_tc1)

  test("Read File") {

    val nodeCount = file_tc1.headerAt("Nodes") match {
      case Some(x) => x.toInt
      case None => 0
    }

    assert(graph_tc1.vertices.length === nodeCount)

    val testVertex0 = graph_tc1.vertices(0)
    assert(testVertex0.edges.size === 2)
    assert(testVertex0.edges.contains(Edge(0, 1, 2)))
    assert(testVertex0.edges.contains(Edge(0, 3, 1)))

    val testVertex1 = graph_tc1.vertices(1)
    assert(testVertex1.edges.size === 3)
    assert(testVertex1.edges.contains(Edge(0, 1, 2)))
    assert(testVertex1.edges.contains(Edge(1, 2, 5)))
    assert(testVertex1.edges.contains(Edge(1, 3, 3)))

    val testVertex2 = graph_tc1.vertices(2)
    assert(testVertex2.edges.size === 2)
    assert(testVertex2.edges.contains(Edge(1, 2, 5)))
    assert(testVertex2.edges.contains(Edge(2, 3, 4)))

    val testVertex3 = graph_tc1.vertices(3)
    assert(testVertex3.edges.size === 3)
    assert(testVertex3.edges.contains(Edge(0, 3, 1)))
    assert(testVertex3.edges.contains(Edge(1, 3, 3)))
    assert(testVertex3.edges.contains(Edge(2, 3, 4)))

  }

  test("Faulty Heap") {

    val testHeap = LookupHeap(Vector(2107, 9368, 2568, 9659, 11708, 7573, 3121, 11816, 100000, 100000, 100000, 10191, 8438, 9610, 4678, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 9511, 100000, 100000, 9955, 5577, 5719, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 10833, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 8296, 8739, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 10234, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 8334, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 9628, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 8610), Map(69 -> 68, 138 -> 137, 101 -> 201, 249 -> 48, 234 -> 233, 88 -> 175, 170 -> 169, 115 -> 114, 217 -> 216, 5 -> 21, 120 -> 119, 247 -> 123, 202 -> 14, 10 -> 79, 56 -> 111, 142 -> 141, 153 -> 152, 174 -> 173, 185 -> 51, 42 -> 41, 24 -> 11, 37 -> 73, 25 -> 49, 52 -> 104, 14 -> 56, 184 -> 183, 110 -> 109, 125 -> 124, 196 -> 195, 157 -> 156, 189 -> 188, 20 -> 80, 46 -> 45, 93 -> 61, 152 -> 151, 228 -> 227, 57 -> 113, 78 -> 77, 29 -> 57, 216 -> 215, 164 -> 163, 179 -> 178, 211 -> 12, 106 -> 105, 238 -> 237, 121 -> 120, 84 -> 83, 147 -> 146, 61 -> 184, 221 -> 220, 132 -> 131, 89 -> 88, 133 -> 132, 116 -> 115, 243 -> 242, 1 -> 24, 74 -> 148, 206 -> 205, 233 -> 232, 6 -> 47, 248 -> 4, 60 -> 59, 117 -> 116, 85 -> 84, 201 -> 200, 220 -> 219, 102 -> 203, 28 -> 55, 38 -> 37, 160 -> 122, 70 -> 69, 192 -> 191, 21 -> 20, 137 -> 136, 165 -> 164, 33 -> 32, 92 -> 91, 229 -> 228, 197 -> 196, 65 -> 64, 97 -> 6, 224 -> 223, 156 -> 155, 9 -> 17, 188 -> 187, 53 -> 52, 169 -> 168, 141 -> 140, 109 -> 108, 124 -> 9, 77 -> 76, 193 -> 192, 212 -> 211, 96 -> 95, 173 -> 172, 13 -> 26, 129 -> 128, 41 -> 40, 134 -> 133, 73 -> 72, 128 -> 127, 237 -> 236, 105 -> 210, 244 -> 243, 2 -> 39, 205 -> 204, 166 -> 165, 32 -> 31, 34 -> 67, 148 -> 147, 45 -> 44, 161 -> 160, 64 -> 63, 180 -> 179, 17 -> 33, 149 -> 3, 176 -> 246, 191 -> 143, 22 -> 87, 44 -> 0, 59 -> 60, 118 -> 117, 204 -> 2, 27 -> 54, 71 -> 70, 12 -> 50, 54 -> 53, 144 -> 92, 236 -> 235, 181 -> 180, 86 -> 85, 159 -> 158, 187 -> 186, 172 -> 171, 113 -> 112, 219 -> 218, 81 -> 162, 230 -> 229, 76 -> 75, 7 -> 27, 245 -> 244, 39 -> 38, 98 -> 97, 208 -> 207, 103 -> 102, 140 -> 139, 213 -> 212, 91 -> 90, 66 -> 65, 240 -> 239, 155 -> 154, 198 -> 197, 108 -> 107, 130 -> 129, 223 -> 222, 135 -> 134, 226 -> 225, 3 -> 23, 241 -> 240, 80 -> 29, 167 -> 166, 35 -> 34, 162 -> 161, 209 -> 25, 112 -> 224, 123 -> 22, 194 -> 193, 145 -> 144, 48 -> 96, 63 -> 62, 18 -> 36, 150 -> 149, 95 -> 190, 50 -> 100, 67 -> 66, 199 -> 198, 177 -> 176, 182 -> 181, 16 -> 15, 127 -> 126, 31 -> 19, 154 -> 153, 11 -> 43, 72 -> 71, 175 -> 174, 143 -> 142, 43 -> 42, 231 -> 230, 99 -> 98, 87 -> 86, 203 -> 202, 218 -> 217, 104 -> 208, 40 -> 159, 26 -> 103, 158 -> 157, 186 -> 185, 55 -> 110, 114 -> 13, 171 -> 170, 139 -> 138, 23 -> 46, 8 -> 16, 75 -> 74, 119 -> 118, 58 -> 28, 235 -> 234, 246 -> 245, 207 -> 206, 82 -> 81, 214 -> 213, 151 -> 150, 36 -> 35, 168 -> 167, 146 -> 145, 30 -> 10, 51 -> 101, 190 -> 189, 183 -> 182, 19 -> 18, 210 -> 209, 107 -> 106, 239 -> 238, 242 -> 241, 4 -> 8, 126 -> 125, 136 -> 135, 79 -> 78, 195 -> 194, 94 -> 93, 131 -> 130, 47 -> 94, 15 -> 30, 163 -> 1, 200 -> 199, 68 -> 7, 62 -> 58, 178 -> 177, 90 -> 89, 111 -> 221, 227 -> 226, 122 -> 121, 83 -> 82, 215 -> 214, 222 -> 5, 232 -> 231, 100 -> 99), Map(69 -> 70, 138 -> 139, 101 -> 51, 234 -> 235, 0 -> 44, 88 -> 89, 170 -> 171, 115 -> 116, 217 -> 218, 5 -> 222, 120 -> 121, 202 -> 203, 10 -> 30, 56 -> 14, 142 -> 143, 153 -> 154, 174 -> 175, 185 -> 186, 42 -> 43, 24 -> 1, 37 -> 38, 25 -> 209, 52 -> 53, 14 -> 202, 184 -> 61, 110 -> 55, 125 -> 126, 196 -> 197, 157 -> 158, 189 -> 190, 20 -> 21, 46 -> 23, 93 -> 94, 152 -> 153, 228 -> 229, 57 -> 29, 78 -> 79, 29 -> 80, 216 -> 217, 164 -> 165, 179 -> 180, 211 -> 212, 106 -> 107, 238 -> 239, 121 -> 122, 84 -> 85, 147 -> 148, 61 -> 93, 221 -> 111, 132 -> 133, 89 -> 90, 133 -> 134, 116 -> 117, 243 -> 244, 1 -> 163, 74 -> 75, 206 -> 207, 233 -> 234, 6 -> 97, 60 -> 59, 117 -> 118, 85 -> 86, 201 -> 101, 220 -> 221, 102 -> 103, 28 -> 58, 38 -> 39, 160 -> 161, 70 -> 71, 192 -> 193, 21 -> 5, 137 -> 138, 165 -> 166, 33 -> 17, 92 -> 144, 229 -> 230, 197 -> 198, 65 -> 66, 97 -> 98, 224 -> 112, 156 -> 157, 9 -> 124, 188 -> 189, 53 -> 54, 169 -> 170, 141 -> 142, 109 -> 110, 124 -> 125, 225 -> 226, 77 -> 78, 193 -> 194, 212 -> 213, 96 -> 48, 173 -> 174, 13 -> 114, 129 -> 130, 41 -> 42, 134 -> 135, 73 -> 37, 128 -> 129, 237 -> 238, 105 -> 106, 244 -> 245, 2 -> 204, 205 -> 206, 166 -> 167, 32 -> 33, 34 -> 35, 148 -> 74, 45 -> 46, 161 -> 162, 64 -> 65, 180 -> 181, 17 -> 9, 149 -> 150, 176 -> 177, 191 -> 192, 22 -> 123, 44 -> 45, 59 -> 60, 118 -> 119, 204 -> 205, 27 -> 7, 71 -> 72, 12 -> 211, 54 -> 27, 144 -> 145, 49 -> 25, 236 -> 237, 181 -> 182, 86 -> 87, 159 -> 40, 187 -> 188, 172 -> 173, 113 -> 57, 219 -> 220, 81 -> 82, 230 -> 231, 76 -> 77, 7 -> 68, 245 -> 246, 39 -> 2, 98 -> 99, 208 -> 104, 103 -> 26, 140 -> 141, 213 -> 214, 91 -> 92, 66 -> 67, 240 -> 241, 155 -> 156, 198 -> 199, 108 -> 109, 130 -> 131, 223 -> 224, 135 -> 136, 226 -> 227, 3 -> 149, 241 -> 242, 80 -> 20, 167 -> 168, 35 -> 36, 162 -> 81, 209 -> 210, 112 -> 113, 123 -> 247, 194 -> 195, 145 -> 146, 48 -> 249, 63 -> 64, 18 -> 19, 150 -> 151, 95 -> 96, 50 -> 12, 67 -> 34, 199 -> 200, 177 -> 178, 182 -> 183, 16 -> 8, 127 -> 128, 31 -> 32, 154 -> 155, 11 -> 24, 72 -> 73, 175 -> 88, 143 -> 191, 43 -> 11, 231 -> 232, 99 -> 100, 87 -> 22, 203 -> 102, 218 -> 219, 104 -> 52, 40 -> 41, 26 -> 13, 158 -> 159, 186 -> 187, 55 -> 28, 114 -> 115, 171 -> 172, 139 -> 140, 23 -> 3, 8 -> 4, 75 -> 76, 119 -> 120, 58 -> 62, 235 -> 236, 246 -> 176, 207 -> 208, 82 -> 83, 214 -> 215, 151 -> 152, 36 -> 18, 168 -> 169, 146 -> 147, 30 -> 15, 51 -> 185, 190 -> 95, 183 -> 184, 19 -> 31, 210 -> 105, 107 -> 108, 239 -> 240, 242 -> 243, 4 -> 248, 126 -> 127, 136 -> 137, 79 -> 10, 195 -> 196, 94 -> 47, 131 -> 132, 47 -> 6, 15 -> 16, 163 -> 164, 200 -> 201, 68 -> 69, 62 -> 63, 178 -> 179, 90 -> 91, 111 -> 56, 227 -> 228, 122 -> 160, 83 -> 84, 215 -> 216, 222 -> 223, 232 -> 233, 100 -> 50))


    def popIter(heap: LookupHeap, prev: Int): Unit = heap match {
      case LookupHeap.empty =>
      case h =>
        val (_, cost, h1) = h.pop()
        assert(cost >= prev)
        println(cost)
        popIter(h1, cost)
    }

    popIter(testHeap, 0)
  }

  //val file_problem = new HeaderFile(s"$basePath/edges.txt")
  val heap = MinimumSpanningTree.buildHeap(graph_tc1)

  test("Build Heap") {
    assert(heap.heap.size == 3)
    assert(heap(1) === 2)
    assert(heap(2) === MinimumSpanningTree.UNSEEN_COST)
    assert(heap(3) === 1)
  }

  val (ref, cost, reducedHeap) = heap.pop()
  test("Pop from Heap") {
    assert(ref === 3)
    assert(cost === 1)
    assert(reducedHeap.heap.size === 2)
    assert(reducedHeap(1) === 2)
    assert(reducedHeap(2) === MinimumSpanningTree.UNSEEN_COST)
    assert(reducedHeap.isDefinedAt(3) === false)
  }

  val updatedHeap = MinimumSpanningTree.updateVertexCosts(graph_tc1, ref, reducedHeap)
  test("update vertex costs")
  {
    assert(updatedHeap.heap.size === 2)
    assert(updatedHeap(1) === 2)
    assert(updatedHeap(2) === 4)
    assert(updatedHeap.isDefinedAt(3) === false)
  }

  val file_tc2 = new HeaderFile(s"$basePath/mst-tc2.txt")
  val file_tc3 = new HeaderFile(s"$basePath/mst-tc3.txt")
  val file_tc4 = new HeaderFile(s"$basePath/mst-tc4.txt")
  val file_tc5 = new HeaderFile(s"$basePath/mst-tc5.txt")
  val file_tc6 = new HeaderFile(s"$basePath/mst-tc6.txt")
  val file_tc7 = new HeaderFile(s"$basePath/mst-tc7.txt")
  val file_tc8 = new HeaderFile(s"$basePath/mst-tc8.txt")
  val file_problem = new HeaderFile(s"$basePath/edges.txt")

  test("big heap")
  {
    val graph = Graph.fromFile(file_tc8)
    val heap = MinimumSpanningTree.buildHeap(graph)

    def popIter(heap: LookupHeap, prev: Int): Unit = heap match {
      case LookupHeap.empty =>
      case h =>
        val (_, cost, h1) = h.pop()
        assert (cost >= prev)
        popIter(h1, cost)
    }

    popIter(heap, 0)
  }

  List(file_tc1, file_tc2, file_tc3, file_tc4, file_tc5, file_tc6, file_tc7, file_tc8, file_problem).foreach((file) => {
    test("Prim's MST " + file.path) {
      val graph = Graph.fromFile(file)
      val expected = file.headerAt("Expected").map(_.toInt).getOrElse(0)
      assert(MinimumSpanningTree.primsOverallCost(graph) === expected)
    }
  })
}
